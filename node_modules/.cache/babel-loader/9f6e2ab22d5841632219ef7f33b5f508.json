{"ast":null,"code":"var _jsxFileName = \"E:\\\\probaReact\\\\projekt\\\\src\\\\components\\\\MapView.jsx\";\nimport ReactMapboxGl, { Layer, Feature } from \"react-mapbox-gl\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport React, { PureComponent } from \"react\";\nimport jel from \"../img/images.png\";\nimport ReactMapGL, { Marker } from \"react-map-gl\";\nimport axios from \"axios\";\nimport HelysegekService from \"../service/HelysegekService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Map = ReactMapboxGl({\n  accessToken: \"pk.eyJ1IjoicHVza2k5NiIsImEiOiJja25hOTJzeTAwenRjMnJ0YXQwMzRpNWV4In0.ElYpo9WdpgCbQsFCYrBsvg\"\n});\nconst response = null;\n\nclass MapView extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      viewport: {\n        width: \"100vw\",\n        height: \"100vh\",\n        latitude: 42.430472,\n        longitude: -123.334102,\n        zoom: 16\n      },\n      userLocation: {},\n      helysegek: {},\n      reload: false\n    };\n  }\n\n  componentDidMount() {\n    HelysegekService.getHelysegek().then(res => {\n      let setUserLocation = {\n        lat: res.data.latitude,\n        long: res.data.longitude\n      };\n      this.setState({\n        helysegek: setUserLocation\n      });\n    }).catch(function (ex) {\n      console.log(\"Response parsing failed. Error: \", ex);\n    });\n    navigator.geolocation.getCurrentPosition(position => {\n      // let setUserLocation = {\n      //   lat: position.coords.latitude,\n      //   long: position.coords.longitude,\n      // };\n      let newViewport = {\n        height: \"100vh\",\n        width: \"100vw\",\n        latitude: position.coords.latitude,\n        longitude: position.coords.longitude,\n        zoom: 10\n      };\n      this.setState({\n        viewport: newViewport // userLocation: setUserLocation,\n\n      });\n    }); // this.setState({ reload: true });\n  }\n\n  render() {\n    const valami = true;\n    this.setS; // const helyseg = helysegek.map(helyseg => <Planet name={planet.name} type={planet.type} />);\n\n    if (this.state.helysegek.length != null) {\n      this.forceUpdate();\n      return /*#__PURE__*/_jsxDEV(ReactMapGL, { ...this.state.viewport,\n        mapStyle: \"mapbox://styles/mapbox/outdoors-v11\",\n        onViewportChange: viewport => this.setState({\n          viewport\n        }),\n        mapboxApiAccessToken: \"pk.eyJ1IjoicHVza2k5NiIsImEiOiJja25hOTJzeTAwenRjMnJ0YXQwMzRpNWV4In0.ElYpo9WdpgCbQsFCYrBsvg\",\n        children: Object.keys(this.state.userLocation).length !== 0 ? /*#__PURE__*/_jsxDEV(Marker, {\n          latitude: this.state.userLocation.lat,\n          longitude: this.state.userLocation.long,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"I'm Here!!!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Empty\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"LOADING\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 14\n      }, this);\n    }\n  }\n\n}\n\nexport default MapView;","map":{"version":3,"sources":["E:/probaReact/projekt/src/components/MapView.jsx"],"names":["ReactMapboxGl","Layer","Feature","React","PureComponent","jel","ReactMapGL","Marker","axios","HelysegekService","Map","accessToken","response","MapView","constructor","props","state","viewport","width","height","latitude","longitude","zoom","userLocation","helysegek","reload","componentDidMount","getHelysegek","then","res","setUserLocation","lat","data","long","setState","catch","ex","console","log","navigator","geolocation","getCurrentPosition","position","newViewport","coords","render","valami","setS","length","forceUpdate","Object","keys"],"mappings":"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","sourcesContent":["import ReactMapboxGl, { Layer, Feature } from \"react-mapbox-gl\";\r\nimport \"mapbox-gl/dist/mapbox-gl.css\";\r\nimport React, { PureComponent } from \"react\";\r\nimport jel from \"../img/images.png\";\r\nimport ReactMapGL, { Marker } from \"react-map-gl\";\r\nimport axios from \"axios\";\r\nimport HelysegekService from \"../service/HelysegekService\";\r\n\r\nconst Map = ReactMapboxGl({\r\n  accessToken:\r\n    \"pk.eyJ1IjoicHVza2k5NiIsImEiOiJja25hOTJzeTAwenRjMnJ0YXQwMzRpNWV4In0.ElYpo9WdpgCbQsFCYrBsvg\",\r\n});\r\nconst response = null;\r\nclass MapView extends PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      viewport: {\r\n        width: \"100vw\",\r\n        height: \"100vh\",\r\n        latitude: 42.430472,\r\n        longitude: -123.334102,\r\n        zoom: 16,\r\n      },\r\n      userLocation: {},\r\n      helysegek: {},\r\n      reload: false,\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    HelysegekService.getHelysegek()\r\n      .then((res) => {\r\n        let setUserLocation = {\r\n          lat: res.data.latitude,\r\n          long: res.data.longitude,\r\n        };\r\n        this.setState({ helysegek: setUserLocation });\r\n      })\r\n      .catch(function (ex) {\r\n        console.log(\"Response parsing failed. Error: \", ex);\r\n      });\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      // let setUserLocation = {\r\n      //   lat: position.coords.latitude,\r\n      //   long: position.coords.longitude,\r\n      // };\r\n      let newViewport = {\r\n        height: \"100vh\",\r\n        width: \"100vw\",\r\n        latitude: position.coords.latitude,\r\n        longitude: position.coords.longitude,\r\n        zoom: 10,\r\n      };\r\n      this.setState({\r\n        viewport: newViewport,\r\n        // userLocation: setUserLocation,\r\n      });\r\n    });\r\n    // this.setState({ reload: true });\r\n  }\r\n  render() {\r\n    const valami = true;\r\n    this.setS\r\n    // const helyseg = helysegek.map(helyseg => <Planet name={planet.name} type={planet.type} />);\r\n\r\n    if (this.state.helysegek.length != null) {\r\n      this.forceUpdate();\r\n      return (\r\n        <ReactMapGL\r\n          {...this.state.viewport}\r\n          mapStyle=\"mapbox://styles/mapbox/outdoors-v11\"\r\n          onViewportChange={(viewport) => this.setState({ viewport })}\r\n          mapboxApiAccessToken=\"pk.eyJ1IjoicHVza2k5NiIsImEiOiJja25hOTJzeTAwenRjMnJ0YXQwMzRpNWV4In0.ElYpo9WdpgCbQsFCYrBsvg\"\r\n        >\r\n          {Object.keys(this.state.userLocation).length !== 0 ? (\r\n            <Marker\r\n              latitude={this.state.userLocation.lat}\r\n              longitude={this.state.userLocation.long}\r\n            >\r\n              <div>I'm Here!!!</div>\r\n            </Marker>\r\n          ) : (\r\n            <div>Empty</div>\r\n          )}\r\n        </ReactMapGL>\r\n      );\r\n    } else {\r\n      return <div>LOADING</div>;\r\n    }\r\n  }\r\n}\r\n\r\nexport default MapView;\r\n"]},"metadata":{},"sourceType":"module"}